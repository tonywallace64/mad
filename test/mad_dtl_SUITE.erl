-module(mad_dtl_SUITE).
-include_lib("common_test/include/ct.hrl").
-export([all/0,init_per_suite/1,end_per_suite/1]).
-export([check_mappings/1]).

%% Mappings between page handlers and compiled dtl
%% are generated by the dtl compile.  Compile the
%% dtl.  Check that the ebin and mappings are okay.

all() ->
    [check_mappings].

init_per_suite(Config) ->
    _PrivDir=proplists:get_value(priv_dir,Config),
    DataDir=proplists:get_value(data_dir,Config),
    make_shortcut(),
    copyfiles:copy_dir_contents(DataDir,filename:absname("."),{recursive,true}),
    set_paths(),
    {module,sh} = code:ensure_loaded(sh),
    {ok,_} = file:copy("/home/tony/Projects/mymad/mad","./mad"),
    {done,0,_} = sh:oneliner(["chmod","+x","mad"]),
    Config.

make_shortcut() ->
    {ok,Cwd} = file:get_cwd(),
    Target = filename:join(parent_dir(Cwd),"latest"),
    file:delete(Target),
    file:make_symlink(Cwd,Target).
    
parent_dir(Path) ->
    Split = filename:split(Path),
    filename:join(lists:sublist(Split,length(Split)-1)).

set_paths() ->
    code:add_patha("./ebin"),
    Deps = filelib:wildcard("*","deps"),
    code:add_paths(
      [filename:join(["deps",X,"ebin"]) || X <- Deps]),
    Apps = filelib:wildcard("*","apps"),
    code:add_paths(
      [filename:join(["deps",X,"ebin"]) || X <- Apps]).

is_property_list([]) ->
    true;
is_property_list([{_Key,_Value}|Rest]) ->
    is_property_list(Rest).


end_per_suite(_Config) -> ok.

dtlcompile() ->
    {done,0,MadOutput} =
	sh:oneliner(["./mad","compile","release","script","clock"]),
    ct_logs:tc_pal(mad_output,"~s~n",[MadOutput]).

check_mappings(_) ->
    dtlcompile(),
    true = filelib:is_regular("apps/clock/priv/template_map.dets"),
    true = filelib:is_regular("apps/clock/priv/formslist.edat"),
    [{clock_1,clock_1_view}]=dets_contents("apps/clock/priv/template_map.dets").

dets_contents(File) ->
    {ok,F}=dets:open_file(File,[]),
    R=dets:foldl(fun(X,A) ->
		       [X | A] end, [], F),
    dets:close(F),
    R.
